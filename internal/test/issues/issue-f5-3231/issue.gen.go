// Package issue_f5_3231 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/weberr13/oapi-codegen DO NOT EDIT.
package issue_f5_3231

import (
	"context"
	"fmt"
	"net/http"

	"github.com/weberr13/oapi-codegen/pkg/runtime"
)

// Book defines model for Book.
type Book struct {
	Classification Classification `json:"classification,omitempty"`
}

// Classification defines model for Classification.
type Classification interface{}

// Novel defines model for Novel.
type Novel struct {
	Genre *string `json:"genre,omitempty"`
	Type  string  `json:"type"`
}

// Textbook defines model for Textbook.
type Textbook struct {
	Field *string `json:"field,omitempty"`
	Type  *string `json:"type,omitempty"`
}

func factory(fm map[string]func() interface{}, path, dk string, o map[string]interface{}) (interface{}, error) {
	var dp interface{}
	var dv string
	var ok bool

	if dp, ok = o[dk]; !ok {
		return nil, fmt.Errorf("expecting OneOf object at path '%s' to to have a discriminator property '%s'", path, dk)
	}

	if dv, ok = dp.(string); !ok {
		return nil, fmt.Errorf("expecting OneOf field '%s's' discriminator property '%s' value to be a string", path, dk)
	}

	f, ok := fm[dv]
	if !ok {
		return nil, fmt.Errorf("Unknown discriminator value '%s' when handling OneOf field '%s'", path, dv)
	}
	return f(), nil
}

// Factory method for objects at path Book.classification
func Book_classification_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"Novel":    NewNovel,
		"Textbook": NewTextbook,
	}
	return factory(fm, "Book.classification", "type", o)
}

func SchemaPathFactory(path string) (func(map[string]interface{}) (interface{}, error), error) {
	// Map StringPath => Factory
	pathFactoryMap := map[string]func(map[string]interface{}) (interface{}, error){
		"Book.classification": Book_classification_Factory,
	}

	return pathFactoryMap[path], nil
}

func TypeFactory(kind string) (interface{}, error) {
	// Map StringPath => Factory
	var factoryMap = map[string]func() interface{}{
		"Novel":    NewNovel,
		"Textbook": NewTextbook,
	}
	f, ok := factoryMap[kind]
	if !ok {
		return nil, fmt.Errorf("cannot find type %s", kind)
	}
	return f(), nil
}

func NewNovel() interface{} {
	_d := "Novel"
	return &Novel{Type: _d}
}

func (r Novel) Discriminator() string {
	return "type"
}

func NewTextbook() interface{} {
	_d := "Textbook"
	return &Textbook{Type: &_d}
}

func (r Textbook) Discriminator() string {
	return "type"
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

type HTTPClientInterface interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client HTTPClientInterface

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: &http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        &http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

func (c *ClientWithResponses) UpdateHttpClient(cli HTTPClientInterface) {
	c.ClientInterface.(*Client).Client = cli
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

}
