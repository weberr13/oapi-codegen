{{if .HasDecorators}}
func factory(fm map[string]func() interface{}, path, dk string, o map[string]interface{}) (interface{}, error) {
    var dp interface{}
    var dv string
    var ok bool

	if dp, ok = o[dk]; !ok {
		return nil, fmt.Errorf( "expecting OneOf object at path '%s' to to have a discriminator property '%s'", path, dk )
	}

	if dv, ok = dp.(string); !ok {
		return nil, fmt.Errorf("expecting OneOf field '%s's' discriminator property '%s' value to be a string", path, dk)
	}

	f, ok := fm[dv]
	if !ok {
		return nil, fmt.Errorf("Unknown discriminator value '%s' when handling OneOf field '%s'", path, dv)
	}
	return f(), nil
}

{{range $key, $value := .DecoratedPaths}}
// Factory method for objects at path {{$key}}
func {{dottedStringToTypeName $key}}_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{} { {{range $v2 := $value.Factories}}
       "{{ $v2.JSONName }}": New{{ $v2.SchemaName }},
        {{- end }}
	}
    return factory(fm, "{{$key}}", "{{$value.Discriminator}}", o)
}
{{end}}


func SchemaPathFactory(path string) (func(map[string]interface{}) (interface{}, error), error) {
    // Map StringPath => Factory
    pathFactoryMap := map[string]func(map[string]interface{}) (interface{}, error) { {{range $key, $value := .DecoratedPaths}}
    	"{{$key}}": {{dottedStringToTypeName $key}}_Factory,
	    {{- end}}
    }

	return pathFactoryMap[path], nil
}


func TypeFactory(kind string) (interface{}, error) {
    // Map StringPath => Factory
    var factoryMap = map[string]func() interface{} { {{range $key, $value := .DecoratedSchemas}}
        "{{$value.JSONName}}": New{{ $value.SchemaName }},
        {{- end}}
    }
	f, ok := factoryMap[kind]
	if !ok {
		return nil, fmt.Errorf("cannot find type %s", kind)
	}
	return f(), nil
}

{{range $key, $value := .DecoratedSchemas}}
func New{{ $key }}() interface{} {
	_d := "{{- $value.JSONName -}}"; return &{{ $key }} { {{ $value.DiscriminatorPascal }}: {{if ne true $value.Required }} &{{end}}_d }
}

func (r {{ $key }}) Discriminator() string {
    return "{{ $value.Discriminator }}"
}

{{end -}}
{{end}}


{{range .Types}}{{$addType := .Schema.AdditionalPropertiesType.TypeDecl}}

// Getter for additional properties for {{.TypeName}}. Returns the specified
// element and whether it was found
func (a {{.TypeName}}) Get(fieldName string) (value {{$addType}}, found bool) {
    if a.AdditionalProperties != nil {
        value, found = a.AdditionalProperties[fieldName]
    }
    return
}

// Setter for additional properties for {{.TypeName}}
func (a *{{.TypeName}}) Set(fieldName string, value {{$addType}}) {
    if a.AdditionalProperties == nil {
        a.AdditionalProperties = make(map[string]{{$addType}})
    }
    a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for {{.TypeName}} to handle AdditionalProperties
func (a *{{.TypeName}}) UnmarshalJSON(b []byte) error {
    object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}
{{range .Schema.Properties}}
    if raw, found := object["{{.JsonFieldName}}"]; found {
        err = json.Unmarshal(raw, &a.{{.GoFieldName}})
        if err != nil {
            return errors.Wrap(err, "error reading '{{.JsonFieldName}}'")
        }
        delete(object, "{{.JsonFieldName}}")
    }
{{end}}
    if len(object) != 0 {
        a.AdditionalProperties = make(map[string]{{$addType}})
        for fieldName, fieldBuf := range object {
            var fieldVal {{$addType}}
            err := json.Unmarshal(fieldBuf, &fieldVal)
            if err != nil {
                return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
            }
            a.AdditionalProperties[fieldName] = fieldVal
        }
    }
	return nil
}

// Override default JSON handling for {{.TypeName}} to handle AdditionalProperties
func (a {{.TypeName}}) MarshalJSON() ([]byte, error) {
    var err error
    object := make(map[string]json.RawMessage)
{{range .Schema.Properties}}
{{if not .Required}}if a.{{.GoFieldName}} != nil { {{end}}
    object["{{.JsonFieldName}}"], err = json.Marshal(a.{{.GoFieldName}})
    if err != nil {
        return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '{{.JsonFieldName}}'"))
    }
{{if not .Required}} }{{end}}
{{end}}
    for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
{{end}}
