// Package testswagger provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/weberr13/oapi-codegen DO NOT EDIT.
package testswagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/weberr13/go-decode/decode"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
)

// Accommodation defines model for Accommodation.
type Accommodation struct {
	Class interface{} `json:"class,omitempty"`
	Title *string     `json:"title,omitempty"`
}

// Bark defines model for Bark.
type Bark struct {
	Type   *string `json:"type,omitempty"`
	Volume *int    `json:"volume,omitempty"`
}

// Cat defines model for Cat.
type Cat struct {
	FavSound interface{} `json:"favSound,omitempty"`
	Mood     *string     `json:"mood,omitempty"`
	Sound    interface{} `json:"sound,omitempty"`
	Type     *string     `json:"type,omitempty"`
}

// Cheetah defines model for Cheetah.
type Cheetah struct {
	Echo        *SchemaWithSound `json:"echo,omitempty"`
	EchoChamber *struct {
		Sound *string `json:"sound,omitempty"`
		Type  *string `json:"type,omitempty"`
	} `json:"echoChamber,omitempty"`
	EchoOneOf *SchemaWithOneOfSound `json:"echoOneOf,omitempty"`
	FavSound  interface{}           `json:"favSound,omitempty"`
	Sound     interface{}           `json:"sound,omitempty"`
	Type      *string               `json:"type,omitempty"`
}

// Dog defines model for Dog.
type Dog struct {
	Kind  *string     `json:"kind,omitempty"`
	Sound interface{} `json:"sound,omitempty"`
	Type  *string     `json:"type,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Growl defines model for Growl.
type Growl struct {
	Severity *string `json:"severity,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// House defines model for House.
type House struct {
	Name  *string `json:"name,omitempty"`
	Rooms *int    `json:"rooms,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Kennel defines model for Kennel.
type Kennel struct {
	Name  *string `json:"name,omitempty"`
	Rooms *int    `json:"rooms,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Meow defines model for Meow.
type Meow struct {
	Squeel *string `json:"squeel,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// Palace defines model for Palace.
type Palace struct {
	Halls  *int    `json:"Halls,omitempty"`
	Name   *string `json:"name,omitempty"`
	Towers *int    `json:"towers,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// PetOwner defines model for PetOwner.
type PetOwner struct {
	Age        *int             `json:"age,omitempty"`
	Dogs       *[]Dog           `json:"dogs,omitempty"`
	Favorite   interface{}      `json:"favorite,omitempty"`
	LivesIn    interface{}      `json:"livesIn,omitempty"`
	Name       *string          `json:"name,omitempty"`
	Owns       *[]Accommodation `json:"owns,omitempty"`
	PetLivesIn *Accommodation   `json:"petLivesIn,omitempty"`
}

// PetOwnerStatus defines model for PetOwnerStatus.
type PetOwnerStatus interface{}

// Purr defines model for Purr.
type Purr struct {
	Heritage *Accommodation `json:"heritage,omitempty"`
	Type     *string        `json:"type,omitempty"`
}

// SchemaWithOneOfSound defines model for SchemaWithOneOfSound.
type SchemaWithOneOfSound struct {
	Sound interface{} `json:"sound,omitempty"`
	Type  *string     `json:"type,omitempty"`
}

// SchemaWithSound defines model for SchemaWithSound.
type SchemaWithSound struct {
	Sound *string `json:"sound,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Shack defines model for Shack.
type Shack struct {
	Material *string `json:"material,omitempty"`
	Name     *string `json:"name,omitempty"`
	Type     *string `json:"type,omitempty"`
}

func factory(fm map[string]func() interface{}, path, dk string, o map[string]interface{}) (interface{}, error) {
	var dp interface{}
	var dv string
	var ok bool

	if dp, ok = o[dk]; !ok {
		return nil, fmt.Errorf("expecting OneOf object at path '%s' to to have a discriminator property '%s'", path, dk)
	}

	if dv, ok = dp.(string); !ok {
		return nil, fmt.Errorf("expecting OneOf field '%s's' discriminator property '%s' value to be a string", path, dk)
	}

	f, ok := fm[dv]
	if !ok {
		return nil, fmt.Errorf("Unknown discriminator value '%s' when handling OneOf field '%s'", path, dv)
	}
	return f(), nil
}

// Factory method for objects at path Accommodation.class
func Accommodation_class_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"BARK":   NewKennel,
		"House":  NewHouse,
		"Palace": NewPalace,
		"Shack":  NewShack,
	}
	return factory(fm, "Accommodation.class", "type", o)
}

// Factory method for objects at path Cat.favSound
func Cat_favSound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"MEOW": NewMeow,
		"PURR": NewPurr,
	}
	return factory(fm, "Cat.favSound", "type", o)
}

// Factory method for objects at path Cat.sound
func Cat_sound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"LOUD": NewMeow,
		"PURR": NewPurr,
		"WARN": NewGrowl,
	}
	return factory(fm, "Cat.sound", "type", o)
}

// Factory method for objects at path Cheetah.favSound
func Cheetah_favSound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"MEOW": NewMeow,
		"PURR": NewPurr,
	}
	return factory(fm, "Cheetah.favSound", "type", o)
}

// Factory method for objects at path Cheetah.sound
func Cheetah_sound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"LOUD": NewMeow,
		"PURR": NewPurr,
		"WARN": NewGrowl,
	}
	return factory(fm, "Cheetah.sound", "type", o)
}

// Factory method for objects at path Dog.sound
func Dog_sound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"BARK": NewBark,
	}
	return factory(fm, "Dog.sound", "type", o)
}

// Factory method for objects at path PetOwner.favorite
func PetOwner_favorite_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"Cat": NewCat,
		"Dog": NewDog,
	}
	return factory(fm, "PetOwner.favorite", "type", o)
}

// Factory method for objects at path PetOwner.livesIn
func PetOwner_livesIn_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"House":  NewHouse,
		"Palace": NewPalace,
	}
	return factory(fm, "PetOwner.livesIn", "type", o)
}

// Factory method for objects at path SchemaWithOneOfSound.sound
func SchemaWithOneOfSound_sound_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"LOUD": NewMeow,
		"PURR": NewPurr,
		"WARN": NewGrowl,
	}
	return factory(fm, "SchemaWithOneOfSound.sound", "type", o)
}

func SchemaPathFactory(path string) (func(map[string]interface{}) (interface{}, error), error) {
	// Map StringPath => Factory
	pathFactoryMap := map[string]func(map[string]interface{}) (interface{}, error){
		"Accommodation.class":        Accommodation_class_Factory,
		"Cat.favSound":               Cat_favSound_Factory,
		"Cat.sound":                  Cat_sound_Factory,
		"Cheetah.favSound":           Cheetah_favSound_Factory,
		"Cheetah.sound":              Cheetah_sound_Factory,
		"Dog.sound":                  Dog_sound_Factory,
		"PetOwner.favorite":          PetOwner_favorite_Factory,
		"PetOwner.livesIn":           PetOwner_livesIn_Factory,
		"SchemaWithOneOfSound.sound": SchemaWithOneOfSound_sound_Factory,
	}

	return pathFactoryMap[path], nil
}

func TypeFactory(kind string) (interface{}, error) {
	// Map StringPath => Factory
	var factoryMap = map[string]func() interface{}{
		"BARK":   NewBark,
		"Cat":    NewCat,
		"Dog":    NewDog,
		"WARN":   NewGrowl,
		"House":  NewHouse,
		"BARK":   NewKennel,
		"MEOW":   NewMeow,
		"Palace": NewPalace,
		"PURR":   NewPurr,
		"Shack":  NewShack,
	}
	f, ok := factoryMap[kind]
	if !ok {
		return nil, fmt.Errorf("cannot find type %s", kind)
	}
	return f(), nil
}

func NewBark() interface{} {
	_d := "BARK"
	return &Bark{Type: &_d}
}

func (r Bark) Discriminator() string {
	return "type"
}

func NewCat() interface{} {
	_d := "Cat"
	return &Cat{Type: &_d}
}

func (r Cat) Discriminator() string {
	return "type"
}

func NewDog() interface{} {
	_d := "Dog"
	return &Dog{Type: &_d}
}

func (r Dog) Discriminator() string {
	return "type"
}

func NewGrowl() interface{} {
	_d := "WARN"
	return &Growl{Type: &_d}
}

func (r Growl) Discriminator() string {
	return "type"
}

func NewHouse() interface{} {
	_d := "House"
	return &House{Type: &_d}
}

func (r House) Discriminator() string {
	return "type"
}

func NewKennel() interface{} {
	_d := "BARK"
	return &Kennel{Type: &_d}
}

func (r Kennel) Discriminator() string {
	return "type"
}

func NewMeow() interface{} {
	_d := "MEOW"
	return &Meow{Type: &_d}
}

func (r Meow) Discriminator() string {
	return "type"
}

func NewPalace() interface{} {
	_d := "Palace"
	return &Palace{Type: &_d}
}

func (r Palace) Discriminator() string {
	return "type"
}

func NewPurr() interface{} {
	_d := "PURR"
	return &Purr{Type: &_d}
}

func (r Purr) Discriminator() string {
	return "type"
}

func NewShack() interface{} {
	_d := "Shack"
	return &Shack{Type: &_d}
}

func (r Shack) Discriminator() string {
	return "type"
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// PutOwner request  with any body
	PutOwnerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// GetOwnerStatus request
	GetOwnerStatus(ctx context.Context) (*http.Response, error)

	// TestOwnerStatus request
	TestOwnerStatus(ctx context.Context) (*http.Response, error)
}

func (c *Client) PutOwnerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutOwnerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetOwnerStatus(ctx context.Context) (*http.Response, error) {
	req, err := NewGetOwnerStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TestOwnerStatus(ctx context.Context) (*http.Response, error) {
	req, err := NewTestOwnerStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewPutOwnerRequestWithBody generates requests for PutOwner with any type of body
func NewPutOwnerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/owner", server)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetOwnerStatusRequest generates requests for GetOwnerStatus
func NewGetOwnerStatusRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/owner/pets", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestOwnerStatusRequest generates requests for TestOwnerStatus
func NewTestOwnerStatusRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/owner/testStatus", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type putOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r putOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r putOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getOwnerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetOwnerStatus
	XML200       *interface{}
	YAML200      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getOwnerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getOwnerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type testOwnerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r testOwnerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r testOwnerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PutOwnerWithBodyWithResponse request with arbitrary body returning *PutOwnerResponse
func (c *ClientWithResponses) PutOwnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*putOwnerResponse, error) {
	rsp, err := c.PutOwnerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseputOwnerResponse(rsp)
}

// GetOwnerStatusWithResponse request returning *GetOwnerStatusResponse
func (c *ClientWithResponses) GetOwnerStatusWithResponse(ctx context.Context) (*getOwnerStatusResponse, error) {
	rsp, err := c.GetOwnerStatus(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetOwnerStatusResponse(rsp)
}

// TestOwnerStatusWithResponse request returning *TestOwnerStatusResponse
func (c *ClientWithResponses) TestOwnerStatusWithResponse(ctx context.Context) (*testOwnerStatusResponse, error) {
	rsp, err := c.TestOwnerStatus(ctx)
	if err != nil {
		return nil, err
	}
	return ParsetestOwnerStatusResponse(rsp)
}

// ParseputOwnerResponse parses an HTTP response from a PutOwnerWithResponse call
func ParseputOwnerResponse(rsp *http.Response) (*putOwnerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &putOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsegetOwnerStatusResponse parses an HTTP response from a GetOwnerStatusWithResponse call
func ParsegetOwnerStatusResponse(rsp *http.Response) (*getOwnerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getOwnerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &PetOwnerStatus{}
		if _, err := decode.UnmarshalJSONInto(bodyBytes, response.JSON200, SchemaPathFactory); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if _, err := decode.UnmarshalJSONInto(bodyBytes, response.JSONDefault, SchemaPathFactory); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// ParsetestOwnerStatusResponse parses an HTTP response from a TestOwnerStatusWithResponse call
func ParsetestOwnerStatusResponse(rsp *http.Response) (*testOwnerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &testOwnerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		res, err := decode.UnmarshalJSONInto(bodyBytes, &Dog{}, SchemaPathFactory)
		if err != nil {
			return nil, err
		}
		response.JSON200 = &res
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create pet owners// (PUT /owner)
	PutOwner(ctx echo.Context) error
	// Get owner pets// (GET /owner/pets)
	GetOwnerStatus(ctx echo.Context) error
	// Test Owner Status as OneOf// (GET /owner/testStatus)
	TestOwnerStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PutOwner converts echo context to params.
func (w *ServerInterfaceWrapper) PutOwner(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutOwner(ctx)
	return err
}

// GetOwnerStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOwnerStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOwnerStatus(ctx)
	return err
}

// TestOwnerStatus converts echo context to params.
func (w *ServerInterfaceWrapper) TestOwnerStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestOwnerStatus(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT("/owner", wrapper.PutOwner)
	router.GET("/owner/pets", wrapper.GetOwnerStatus)
	router.GET("/owner/testStatus", wrapper.TestOwnerStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/iOBT+K9HZfcwWuvuwUt7awrTVMAXBVNWo4sGTHIinsZ2xHViE+O8r2ymXxiRh",
	"imb3YZ5Aycm5fOf22WuIBcsFR64VRGtQcYqM2L9XcSwYEwnRVHDzIJciR6kp2tdxRpT9k1AVS8ooJ1rI",
	"PbnVA2EIEehVjrAJQXAcziB6XsPvEmcQwW+dne1OabgzIhmJjXy92CQl8Uuj1J0oVLOuj8g5ZrCZbkLQ",
	"VGdogrBeR6C0pHwOG/PKPRFfv2GsTUDXRL5UcXFia0BeMIie4fpq/BGm4VuFISxEVrB9W5RrnKP0G7sh",
	"umprRhYTUfDk/Gn4hGLZCNyokNLBxoRI9oO+GgyHHyCED+P7/kNv8AVCmNx98cKgjgbASJ4boWgNg+Fj",
	"r9bVEJ6uxg/HRG6lWGbG2M/CpEGo9Ge6TXSrertJETVJq2WAcSrMb23D2N8nqlNXMZvQfnaTEvYVZVXn",
	"Ni2VhJ3gsbEwdNi29c6Kb1383xT4ryptm/OemFer6YXyg/lw+3jf69uh0B/d9cc9COHz8NT58C6Y7PA+",
	"Nba+lMLTK7FI0NsqDJUi87baHd7VTsQFSqpXtc24BXY8fBp4cPTZc9uxYo8T5o9GCsGUb1+dhGG5bc9q",
	"tmHX+tywbVLF+nuBzrlGpD/1h08tbZWcpmLtjmSZo1A4I0WmIfo79ER5FBktligPFVyG78vOCPVwyX0L",
	"4bCO97QnYm4FqEaXp7q2M9NhZ5dISVblnBeSajx/nxve1DTorFNmFGR0geqen9+LdkT0lftO65Iulrw9",
	"3Icc3gN8jnqwC/oEVXXFM9FEF+o929JkrX5ZloX082rDrsxKV6RmNJet8QOJ2I2T0eN43HKceMnScQL3",
	"i7G0xrMJyvdwYXdirehmRKOkJDuY4qCpZeUeOnR8GbR1xTyifGZPDOVx13SughAWKJU97MPlRfeia1OY",
	"Iyc5hQj+uuheXEIIOdGpdb0jtpuisIdTE5ct8PsEIvPQrZIQJH4vUOlrkawcX+Iauf2E5HlGY/vRH9+U",
	"u2dw2WzqqO2msgElaIo8d1cVkFGlAzELZphRjkEskehCoipdoRITiLQs0PDLgjEiVxCBFcMgRx3YyJRF",
	"z0XZydFdkMzRE+r8cPAZKyoXXLkU/9ntHo+682NRl5aMg/vK/mHZoS7CV+cdhG8Mrshbi2cfvdX0Too4",
	"RqUs+XhtmTPh6xi+x+bri/2CuX2tlCB3/aOJoULP4Bpjulc+GpXerUVvERmRM1bRf0ajavJ1gN5nVDqw",
	"AQcu4oCowN0WeJA0n6JcWL77PN38GwAA//9ZRzp4uBQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
