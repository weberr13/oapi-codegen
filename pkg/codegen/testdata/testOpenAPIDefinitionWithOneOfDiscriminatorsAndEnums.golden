// Package testswagger provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/weberr13/oapi-codegen DO NOT EDIT.
package testswagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/xml"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/weberr13/go-decode/decode"
	"gopkg.in/yaml.v2"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// CatAlive defines model for CatAlive.
type CatAlive struct {
	AliveSince *time.Time `json:"alive_since,omitempty"`
	Name       *string    `json:"name,omitempty"`
	Type       *string    `json:"type,omitempty"`
}

// CatBreed defines model for CatBreed.
type CatBreed interface{}

// CatDead defines model for CatDead.
type CatDead struct {
	Cause     *string    `json:"cause,omitempty"`
	DeadSince *time.Time `json:"dead_since,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Type      *string    `json:"type,omitempty"`
}

// Cats defines model for Cats.
type Cats struct {
	Box   interface{} `json:"box,omitempty"`
	Breed CatBreed    `json:"breed,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// MixedBreed defines model for MixedBreed.
type MixedBreed struct {
	FurColor  *string `json:"furColor,omitempty"`
	FurLength *string `json:"furLength,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// Purebred defines model for Purebred.
type Purebred struct {
	Breed   *string `json:"breed,omitempty"`
	Breeder *string `json:"breeder,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Test defines model for Test.
type Test struct {
	Cases *[]TestCase `json:"cases,omitempty"`
	Name  *string     `json:"name,omitempty"`
}

// TestCase defines model for TestCase.
type TestCase struct {
	Command *string `json:"command,omitempty"`
	Name    *string `json:"name,omitempty"`
}

func factory(fm map[string]func() interface{}, path, dk string, o map[string]interface{}) (interface{}, error) {
	var dp interface{}
	var dv string
	var ok bool

	if dp, ok = o[dk]; !ok {
		return nil, fmt.Errorf("expecting OneOf object at path '%s' to to have a discriminator property '%s'", path, dk)
	}

	if dv, ok = dp.(string); !ok {
		return nil, fmt.Errorf("expecting OneOf field '%s's' discriminator property '%s' value to be a string", path, dk)
	}

	f, ok := fm[dv]
	if !ok {
		return nil, fmt.Errorf("Unknown discriminator value '%s' when handling OneOf field '%s'", path, dv)
	}
	return f(), nil
}

// Factory method for objects at path Cats.box
func Cats_box_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"cat_alive": NewCatAlive,
		"cat_dead":  NewCatDead,
	}
	return factory(fm, "Cats.box", "type", o)
}

// Factory method for objects at path Cats.breed
func Cats_breed_Factory(o map[string]interface{}) (interface{}, error) {
	fm := map[string]func() interface{}{
		"mixed_breed": NewMixedBreed,
		"pure_breed":  NewPurebred,
	}
	return factory(fm, "Cats.breed", "type", o)
}

func SchemaPathFactory(path string) (func(map[string]interface{}) (interface{}, error), error) {
	// Map StringPath => Factory
	pathFactoryMap := map[string]func(map[string]interface{}) (interface{}, error){
		"Cats.box":   Cats_box_Factory,
		"Cats.breed": Cats_breed_Factory,
	}

	return pathFactoryMap[path], nil
}

func TypeFactory(kind string) (interface{}, error) {
	// Map StringPath => Factory
	var factoryMap = map[string]func() interface{}{
		"cat_alive":   NewCatAlive,
		"cat_dead":    NewCatDead,
		"mixed_breed": NewMixedBreed,
		"pure_breed":  NewPurebred,
	}
	f, ok := factoryMap[kind]
	if !ok {
		return nil, fmt.Errorf("cannot find type %s", kind)
	}
	return f(), nil
}

func NewCatAlive() interface{} {
	_d := "cat_alive"
	return &CatAlive{Type: &_d}
}

func (r CatAlive) Discriminator() string {
	return "type"
}

func NewCatDead() interface{} {
	_d := "cat_dead"
	return &CatDead{Type: &_d}
}

func (r CatDead) Discriminator() string {
	return "type"
}

func NewMixedBreed() interface{} {
	_d := "mixed_breed"
	return &MixedBreed{Type: &_d}
}

func (r MixedBreed) Discriminator() string {
	return "type"
}

func NewPurebred() interface{} {
	_d := "pure_breed"
	return &Purebred{Type: &_d}
}

func (r Purebred) Discriminator() string {
	return "type"
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCatStatus request
	GetCatStatus(ctx context.Context) (*http.Response, error)

	// PutCats request  with any body
	PutCatsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// GetTestByName request
	GetTestByName(ctx context.Context, name string) (*http.Response, error)
}

func (c *Client) GetCatStatus(ctx context.Context) (*http.Response, error) {
	req, err := NewGetCatStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutCatsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutCatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestByName(ctx context.Context, name string) (*http.Response, error) {
	req, err := NewGetTestByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetCatStatusRequest generates requests for GetCatStatus
func NewGetCatStatusRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/cat", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCatsRequestWithBody generates requests for PutCats with any type of body
func NewPutCatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/cat", server)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTestByNameRequest generates requests for GetTestByName
func NewGetTestByNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/test/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type getCatStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	XML200       *interface{}
	YAML200      *struct {
		// Embedded struct due to allOf(#/components/schemas/CatAlive)
		CatAlive
		// Embedded struct due to allOf(#/components/schemas/CatDead)
		CatDead
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r getCatStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getCatStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type putCatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r putCatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r putCatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTestByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Test
	XML200       *[]Test
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getTestByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTestByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCatStatusWithResponse request returning *GetCatStatusResponse
func (c *ClientWithResponses) GetCatStatusWithResponse(ctx context.Context) (*getCatStatusResponse, error) {
	rsp, err := c.GetCatStatus(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetCatStatusResponse(rsp)
}

// PutCatsWithBodyWithResponse request with arbitrary body returning *PutCatsResponse
func (c *ClientWithResponses) PutCatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*putCatsResponse, error) {
	rsp, err := c.PutCatsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseputCatsResponse(rsp)
}

// GetTestByNameWithResponse request returning *GetTestByNameResponse
func (c *ClientWithResponses) GetTestByNameWithResponse(ctx context.Context, name string) (*getTestByNameResponse, error) {
	rsp, err := c.GetTestByName(ctx, name)
	if err != nil {
		return nil, err
	}
	return ParsegetTestByNameResponse(rsp)
}

// ParsegetCatStatusResponse parses an HTTP response from a GetCatStatusWithResponse call
func ParsegetCatStatusResponse(rsp *http.Response) (*getCatStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getCatStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		res, err := decode.UnmarshalJSONInto(bodyBytes, &CatDead{}, SchemaPathFactory)
		if err != nil {
			return nil, err
		}
		response.JSON200 = &res
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		response.YAML200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/CatAlive)
			CatAlive
			// Embedded struct due to allOf(#/components/schemas/CatDead)
			CatDead
		}{}
		if err := yaml.Unmarshal(bodyBytes, response.YAML200); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if _, err := decode.UnmarshalJSONInto(bodyBytes, response.JSONDefault, SchemaPathFactory); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// ParseputCatsResponse parses an HTTP response from a PutCatsWithResponse call
func ParseputCatsResponse(rsp *http.Response) (*putCatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &putCatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsegetTestByNameResponse parses an HTTP response from a GetTestByNameWithResponse call
func ParsegetTestByNameResponse(rsp *http.Response) (*getTestByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTestByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Test{}
		if _, err := decode.UnmarshalJSONInto(bodyBytes, response.JSON200, SchemaPathFactory); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		response.XML200 = &[]Test{}
		if err := xml.Unmarshal(bodyBytes, response.XML200); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if _, err := decode.UnmarshalJSONInto(bodyBytes, response.JSONDefault, SchemaPathFactory); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get cat status// (GET /cat)
	GetCatStatus(ctx echo.Context) error
	// deposit cats// (PUT /cat)
	PutCats(ctx echo.Context) error
	// Get test// (GET /test/{name})
	GetTestByName(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCatStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCatStatus(ctx)
	return err
}

// PutCats converts echo context to params.
func (w *ServerInterfaceWrapper) PutCats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCats(ctx)
	return err
}

// GetTestByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetTestByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTestByName(ctx, name)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/cat", wrapper.GetCatStatus)
	router.PUT("/cat", wrapper.PutCats)
	router.GET("/test/:name", wrapper.GetTestByName)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bRhD9K8S0R1pUnBtvsVoEAdomgHMLDGNMDqkNuB/dmRUsCPzvxS7FSDJpyUGa",
	"wCfR+zHzZt57s95BZbWzhowwlDvgak0a0+cK5V2nNhS/nbeOvChKOxiX71mZKm021msUKKFGoStRmiAH",
	"2TqCEli8Mi30ORjU6fRkY1jYAZmgofwCFcp9ygB3kzB9n0dcN56ojndqxZVXWhkU64+Abv9J2YbrfQ7W",
	"0McGyi87+N1TAyX8VhzqLvZFF5+CpwdPNfT5+YN/q0eqBxD9AaR9+EqVwADxD8J62rkKAz8p1kMOtW0h",
	"B9vV2M5VnUNNWP/UhscEz/ebp5U82Mf/n4BvkrtEwNjg/q7P4WFUw4Ube8L6GcL+9P4E/kiXrU8broy8",
	"vT40WxmhlnyMoIk5sjdteEx4JJhJkib4le2G9BOumuD/ItPK+kVM6pjmfujHPJnfJD4ldEQ3yZJ2yL8I",
	"gQuezgL4TCxzvuDhQwlpvsRljLFCpgMAQO9xe0b1Y+p0bYZnrdHMV/9swBhSmcYmG1C0gRNlDZTwea04",
	"U5xhJsSSfXRk3n36kN06qqJ2lHQx0n75amVrek8mS53JYUOehzBvFsvFMpnHkUGnoIS3i+XiDeTgUNYJ",
	"eVFhamdL6ScWhRHFhxrKuLhCuRWUwJCDJ3bW7Bt9vVwOlRshk+6ic52q0u3iK0cE43PwOoze5ycQH3V3",
	"ihDN9tdk3uIkddf9rNRp+B+L6zZUFTEPr0KDoZPv4vFc3mEKzuQcN3LgoDX6LZTwniSrUDIe5SXY8v45",
	"gTiWXZiRpAuS3pOoxn8DsdzYevt8AVffV0AKPYO/UyyZbbKGOmUoqzyhBE8jDJUGovhAJxXW5CyrVCWn",
	"4oto52IXJ0J/znTRyTeDMaJVPWoS8pwEoiKeaF8YR8vw8xRJflTy09Fz94NefvGQnQ7YSyb8kdCvWuoy",
	"TOdR5OnPwZ5MfjOyG3wHJaxFHJdFksvColNX8R+JlsyisrrYXKcBcDh69uRd/18AAAD//3dwHcOjCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
